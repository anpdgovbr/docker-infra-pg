#!/bin/bash
# ============================================================================
# SCRIPT AUTO-SYNC: Sincroniza√ß√£o Inteligente de Bancos
# ============================================================================
# Este script:
# 1. Detecta aplica√ß√µes em apps.conf
# 2. Verifica quais bancos existem no PostgreSQL
# 3. Cria automaticamente os bancos faltantes
# 4. √â idempotente (pode rodar m√∫ltiplas vezes)
# 5. Detecta novas aplica√ß√µes e as cria automaticamente
# ============================================================================

echo "üîÑ [auto-sync-databases.sh] Sincroniza√ß√£o Inteligente de Bancos de Dados"
echo "========================================================================="
echo

# Verificar se estamos no container PostgreSQL
if ! command -v psql &> /dev/null; then
    echo "‚ùå Este script deve ser executado dentro do container PostgreSQL"
    echo "üí° Execute: docker exec -it <postgres-container> bash /app/scripts/auto-sync-databases.sh"
    exit 1
fi

# Verificar vari√°veis de ambiente essenciais
if [[ -z "$POSTGRES_PASSWORD" || -z "$POSTGRES_USER" || -z "$POSTGRES_DB" ]]; then
    echo "‚ùå Vari√°veis de ambiente PostgreSQL n√£o encontradas:"
    echo "   POSTGRES_USER: ${POSTGRES_USER:-'‚ùå N√ÉO DEFINIDA'}"
    echo "   POSTGRES_DB: ${POSTGRES_DB:-'‚ùå N√ÉO DEFINIDA'}"
    echo "   POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:+‚úÖ DEFINIDA}"
    exit 1
fi

# Verificar se apps.conf existe
if [[ ! -f "/app/config/apps.conf" ]]; then
    echo "‚ùå Arquivo /app/config/apps.conf n√£o encontrado"
    echo "üí° Este script funciona apenas em modo GitOps"
    exit 1
fi

# Detectar hostname do PostgreSQL (container vs localhost)
POSTGRES_HOST="localhost"
if [[ -n "$POSTGRES_SERVICE_NAME" ]]; then
    POSTGRES_HOST="$POSTGRES_SERVICE_NAME"
elif ping -c 1 postgres &> /dev/null; then
    POSTGRES_HOST="postgres"
fi

echo "üîó Usando PostgreSQL host: $POSTGRES_HOST"
echo

echo "üìã Estado inicial dos bancos:"
PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$POSTGRES_HOST" -p 5432 -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT datname FROM pg_database WHERE datname NOT IN ('template0', 'template1', 'postgres') ORDER BY datname;"
echo

# Arrays para estat√≠sticas
declare -a apps_found=()
declare -a apps_created=()
declare -a apps_exists=()
declare -a apps_failed=()

# Fun√ß√£o para verificar se banco existe
database_exists() {
    local db_name="$1"
    PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$POSTGRES_HOST" -p 5432 -U "$POSTGRES_USER" -d "$POSTGRES_DB" -tAc "SELECT 1 FROM pg_database WHERE datname='$db_name';" | grep -q 1
}

# Fun√ß√£o para verificar se usu√°rio existe
user_exists() {
    local user_name="$1"
    PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$POSTGRES_HOST" -p 5432 -U "$POSTGRES_USER" -d "$POSTGRES_DB" -tAc "SELECT 1 FROM pg_roles WHERE rolname='$user_name';" | grep -q 1
}

# Fun√ß√£o para criar banco e usu√°rio
create_database_and_user() {
    local app_name="$1"
    local app_db="$2"
    local app_user="$3"
    local password_var="${app_name^^}_PASSWORD"
    local app_pass="${!password_var}"
    
    if [[ -z "$app_pass" ]]; then
        echo "‚ö†Ô∏è  Senha n√£o encontrada para $app_name (vari√°vel $password_var)"
        return 1
    fi
    
    echo "üîß Criando banco e usu√°rio para $app_name..."
    
    # Criar SQL tempor√°rio
    local temp_sql="/tmp/create-${app_name}-temp.sql"
    cat > "$temp_sql" << EOF
-- Cria√ß√£o do banco de dados
CREATE DATABASE $app_db;

-- Cria√ß√£o do usu√°rio (com verifica√ß√£o)
DO \$\$
BEGIN
  IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '$app_user') THEN
    CREATE USER $app_user WITH ENCRYPTED PASSWORD '$app_pass';
  END IF;
END
\$\$;

-- Garante que o usu√°rio pode criar bancos (requerido pelo Prisma migrate dev)
ALTER ROLE $app_user CREATEDB;

-- Garantir privil√©gios no banco
GRANT ALL PRIVILEGES ON DATABASE $app_db TO $app_user;
EOF
    
    # Executar SQL
    if PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$POSTGRES_HOST" -p 5432 -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f "$temp_sql" 2>/dev/null; then
        rm -f "$temp_sql"
        return 0
    else
        echo "‚ùå Erro ao executar SQL. Tentando com output detalhado:"
        PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$POSTGRES_HOST" -p 5432 -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f "$temp_sql"
        rm -f "$temp_sql"
        return 1
    fi
}

# Processar cada aplica√ß√£o em apps.conf
echo "üîç Analisando aplica√ß√µes em apps.conf..."
echo

while IFS=':' read -r app_name app_db app_user comment; do
    # Pula linhas de coment√°rio e vazias
    if [[ "$app_name" =~ ^#.*$ ]] || [[ -z "$app_name" ]]; then
        continue
    fi
    
    # Remove espa√ßos em branco
    app_name=$(echo "$app_name" | xargs)
    app_db=$(echo "$app_db" | xargs)
    app_user=$(echo "$app_user" | xargs)
    
    if [[ -n "$app_name" && -n "$app_db" && -n "$app_user" ]]; then
        apps_found+=("$app_name")
        
        echo "üì± Verificando aplica√ß√£o: $app_name"
        echo "   üìä Banco: $app_db"
        echo "   üë§ Usu√°rio: $app_user"
        
        # Verificar se banco existe
        if database_exists "$app_db"; then
            echo "   ‚úÖ Banco j√° existe"
            apps_exists+=("$app_name")
        else
            echo "   üîÑ Banco n√£o existe - criando..."
            if create_database_and_user "$app_name" "$app_db" "$app_user"; then
                echo "   ‚úÖ Banco criado com sucesso"
                apps_created+=("$app_name")
            else
                echo "   ‚ùå Falha ao criar banco"
                apps_failed+=("$app_name")
            fi
        fi
        echo
    fi
done < "/app/config/apps.conf"

# Estat√≠sticas finais
echo "üìä RELAT√ìRIO FINAL:"
echo "==================="
echo "üîç Aplica√ß√µes encontradas: ${#apps_found[@]}"
echo "‚úÖ Bancos j√° existiam: ${#apps_exists[@]}"
echo "üÜï Bancos criados: ${#apps_created[@]}"
echo "‚ùå Falhas: ${#apps_failed[@]}"
echo

# Detalhar resultados
if [[ ${#apps_exists[@]} -gt 0 ]]; then
    echo "‚úÖ Bancos que j√° existiam:"
    for app in "${apps_exists[@]}"; do
        echo "   - $app"
    done
    echo
fi

if [[ ${#apps_created[@]} -gt 0 ]]; then
    echo "üÜï Bancos criados nesta execu√ß√£o:"
    for app in "${apps_created[@]}"; do
        echo "   - $app"
    done
    echo
fi

if [[ ${#apps_failed[@]} -gt 0 ]]; then
    echo "‚ùå Falhas (verificar senhas no Portainer):"
    for app in "${apps_failed[@]}"; do
        echo "   - $app (verificar vari√°vel ${app^^}_PASSWORD)"
    done
    echo
fi

# Estado final
echo "üìã Estado final dos bancos:"
PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$POSTGRES_HOST" -p 5432 -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT datname FROM pg_database WHERE datname NOT IN ('template0', 'template1', 'postgres') ORDER BY datname;"
echo

# C√≥digo de sa√≠da
if [[ ${#apps_failed[@]} -eq 0 ]]; then
    echo "üéâ Sincroniza√ß√£o conclu√≠da com sucesso!"
    echo "üí° Este script pode ser executado novamente a qualquer momento"
    exit 0
else
    echo "‚ö†Ô∏è  Sincroniza√ß√£o conclu√≠da com algumas falhas"
    echo "üí° Corrige as vari√°veis de ambiente e execute novamente"
    exit 1
fi
