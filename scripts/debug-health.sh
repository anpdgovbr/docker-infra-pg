#!/bin/bash

# ============================================================================
# Script de Diagn√≥stico para Health Check PostgreSQL
# ============================================================================
# Use este script para diagnosticar problemas de health check no PostgreSQL

echo "üîç [debug-health.sh] Iniciando diagn√≥stico de sa√∫de do PostgreSQL..."
echo "üìÖ $(date)"
echo

# 1. Verificar se o PostgreSQL est√° rodando
echo "1Ô∏è‚É£ Verificando se o PostgreSQL est√° ativo..."
if pg_isready -h localhost -p 5432; then
    echo "‚úÖ PostgreSQL est√° respondendo"
else
    echo "‚ùå PostgreSQL n√£o est√° respondendo"
    echo "‚ÑπÔ∏è  Detalhes do erro:"
    pg_isready -h localhost -p 5432 -v
fi
echo

# 2. Verificar conex√£o com usu√°rio administrativo
echo "2Ô∏è‚É£ Testando conex√£o com usu√°rio admin..."
if PGPASSWORD="$POSTGRES_PASSWORD" psql -h localhost -p 5432 -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT version();" >/dev/null 2>&1; then
    echo "‚úÖ Conex√£o administrativa funcionando"
else
    echo "‚ùå Falha na conex√£o administrativa"
    echo "‚ÑπÔ∏è  Usu√°rio: $POSTGRES_USER"
    echo "‚ÑπÔ∏è  Database: $POSTGRES_DB"
fi
echo

# 3. Listar bancos de dados
echo "3Ô∏è‚É£ Listando bancos de dados..."
if PGPASSWORD="$POSTGRES_PASSWORD" psql -h localhost -p 5432 -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "\l" 2>/dev/null; then
    echo "‚úÖ Lista de bancos obtida com sucesso"
else
    echo "‚ùå N√£o foi poss√≠vel listar bancos"
fi
echo

# 4. Listar usu√°rios
echo "4Ô∏è‚É£ Listando usu√°rios..."
if PGPASSWORD="$POSTGRES_PASSWORD" psql -h localhost -p 5432 -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "\du" 2>/dev/null; then
    echo "‚úÖ Lista de usu√°rios obtida com sucesso"
else
    echo "‚ùå N√£o foi poss√≠vel listar usu√°rios"
fi
echo

# 5. Verificar logs do PostgreSQL (√∫ltimas linhas)
echo "5Ô∏è‚É£ Verificando logs recentes..."
if [ -f "/var/log/postgresql/postgresql-15-main.log" ]; then
    echo "üìÑ √öltimas 10 linhas do log:"
    tail -n 10 /var/log/postgresql/postgresql-15-main.log
elif [ -d "/var/lib/postgresql/data/log" ]; then
    echo "üìÑ Logs do data directory:"
    find /var/lib/postgresql/data/log -name "*.log" -exec tail -n 5 {} \;
else
    echo "‚ÑπÔ∏è  Logs n√£o encontrados nos locais padr√£o"
fi
echo

# 6. Verificar arquivos de inicializa√ß√£o
echo "6Ô∏è‚É£ Verificando arquivos de inicializa√ß√£o..."
if [ -d "/docker-entrypoint-initdb.d" ]; then
    echo "üìÅ Arquivos em /docker-entrypoint-initdb.d:"
    ls -la /docker-entrypoint-initdb.d/
    echo
    echo "üîç Verificando sintaxe dos SQLs:"
    for sql_file in /docker-entrypoint-initdb.d/*.sql; do
        if [ -f "$sql_file" ]; then
            echo "  üìÑ Verificando $(basename "$sql_file")..."
            # Verifica√ß√£o b√°sica de sintaxe SQL
            if grep -q "^--" "$sql_file" && grep -q "CREATE" "$sql_file"; then
                echo "    ‚úÖ Estrutura b√°sica parece OK"
            else
                echo "    ‚ö†Ô∏è  Estrutura suspeita"
            fi
        fi
    done
else
    echo "‚ùå Diret√≥rio de inicializa√ß√£o n√£o encontrado"
fi
echo

# 7. Verificar vari√°veis de ambiente
echo "7Ô∏è‚É£ Verificando vari√°veis de ambiente cr√≠ticas..."
echo "  POSTGRES_USER: ${POSTGRES_USER:-'‚ùå N√ÉO DEFINIDA'}"
echo "  POSTGRES_DB: ${POSTGRES_DB:-'‚ùå N√ÉO DEFINIDA'}"
echo "  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:+‚úÖ DEFINIDA}"
echo "  POSTGRES_TIMEZONE: ${POSTGRES_TIMEZONE:-'‚ö†Ô∏è  N√ÉO DEFINIDA (usando default)'}"
echo

echo "üèÅ [debug-health.sh] Diagn√≥stico conclu√≠do em $(date)"
